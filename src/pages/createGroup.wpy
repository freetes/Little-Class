<style lang="less">
page{
  background-color: white;
}

.container{

  >.header{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 10px 7%;
    width: 86%;

    >text{
      color: gray;
      font-size: 12px;
    }
    >input{
      width: 100%;
      padding: 10px 0;
      border-bottom: 1px solid lightgray;
      font-size: 18px;
      font-weight: bold;
      color: black;
    }
    >textarea{
      width: 100%;
      padding: 10px 0;
      min-height: 100px;
      font-size: 16px;
      color: #555;
    }
    >text{

    }
  }
  >.inputs{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 10px 7%;
    padding-top: 10px;
    width: 86%;

    >text{
      color: gray;
      font-size: 12px;
    }

    >.input-container{
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding: 20px 0;
      width: 100%;
      border-bottom: 1px solid #fafafa;

      >text{
        flex: 0 1 auto;
        color: black;
        font-size: 16px;
        padding-right: 20px;
      }
      >input, >picker{
        flex: 1 0 auto;
        color: gray;
        font-size: 16px;
        text-align: right;
      }
    }
  }
  >button{
    padding: 10px 7%;
    width: 86%;
    margin-top: 20px;
    margin-bottom: 20px;
    background-color: white;
    border-top: 1px solid #fafafa;
    border-bottom: 1px solid #fafafa;
  }
  >button::after{
    border: none;
  }
}
</style>
<template>
  <view class="container">
    <view class="header">
      <text>基本信息</text>
      <input placeholder="群名称" data-key="groupInfo.name" value="{{ groupInfo.name }}" bindchange="inputChange" />
      <textarea data-key="groupInfo.description" value="{{ groupInfo.description }}" bindblur="inputChange" auto-height placeholder="描述" />
    </view>

    <!-- <view class="inputs">
      <text>基本信息</text>

      <view class="input-container">
        <text>姓名</text>
        <input placeholder="填写群名称" data-key="userInfo.name" value="{{ userInfo.name }}" bindchange="inputChange" />
      </view>
      <view class="input-container">
        <text>性别</text>
        <picker mode="selector" data-key="userInfo.gender" bindchange="inputChange" value="{{ userInfo.gender }}" range="{{ sexArray }}">
          <view class="picker">
            {{ sexArray[userInfo.gender] }}
          </view>
        </picker>
      </view>
    </view> -->

    <button bindtap="createGroup">确定创建</button>

  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '创建群组'
    }

    data = {
      sexArray: ['保密', '男', '女'],
      kindArray: ['学生', '教师'],
      groupInfo: {
        name: '',
        description: '',
      },
      openid: '',
      _id: ''
    }

    computed = {
      now () {
        return new Date()
      }
    }

    methods = {
      inputChange(e){
        let self = this
        const keyArr = e.currentTarget.dataset.key.split('.')

        if(keyArr.length == 2){
          this[keyArr[0]][keyArr[1]] = e.detail.value
        }
        else if(keyArr.length == 3){
          this[keyArr[0]][keyArr[1]][keyArr[2]] = e.detail.value
        }
      },
      createGroup(){
        let self = this
        
        const db = wx.cloud.database()
        
        db.collection('groups').where({})
        .get({
          success: function(res) {
            db.collection('groups').add({
              data: {
                name: self.groupInfo.name,
                description: self.groupInfo.description,
                owner: self._id,
                createTime: Date.now(),
                members: [],
                checkForm: [],
                status: 0,  // 0 表示可以加入，-1 表示不能加入
                groupCode: 10000 + res.data.length,
              },
              success: function(res) {
                console.log(res)
              }
            })
          }
        })
      }
    }

    onShow() {
      let self = this, openid = wx.getStorageSync('openid'), _id = wx.getStorageSync('_id')

      if(openid){
        self.openid = openid
      }
      if(_id){
        self._id = _id
      }
      
      const db = wx.cloud.database()

      db.collection('users').doc(_id)
      .get({
        success: function(res) {
          delete res.data._openid
          delete res.data._id
          
          self.userInfo = res.data
          self.$apply()
        }
      })
    }
  }
</script>
