<style lang="less">
page{
  background-color: #fafafa;
}

.container{
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;

  >.header{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    width: 100%;

    >.note-cover{
      width: 100%;
      height: 200px;
    }
    >.note-title{
      margin: 0 10%;
      width: 80%;
      margin-top: 30px;
      font-size: 28px;
      font-weight: bold;
      color: black;
    }
    >.note-writer{
      margin: 0 10%;
      width: 80%;
      display: flex;
      flex-direction: row;
      justify-content: flex-start;
      align-items: center;
      margin-top: 10px;
      font-size: 14px;
      color: black;

      >image{
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 10px;
      }
    }
    >.note-info{
      margin: 0 10%;
      width: 80%;
      display: flex;
      flex-direction: row;
      justify-content: flex-start;
      align-items: center;
      margin-top: 10px;
      font-size: 14px;
      color: gray;

      >text{
        margin-right: 10px;
      }
    }
    .note-content{
      margin: 20px 10%;
      width: 80%;
      font-size: 16px;
      color: #353535;
      font-weight: normal;
      line-height: 24px;
    }

    >input{
      margin: 10px 5%;
      width: 90%;
      padding: 10px 0;
      border-bottom: 1px solid #8A8A8A;
      font-size: 15px;
      font-weight: 500;
      color: black;
    }
    >textarea{
      margin: 10px 5%;
      width: 90%;
      padding: 10px 0;
      height: 250px;
      font-size: 15px;
      color: black;
    }
  }
  >.tags-container{
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    margin: 20px 10%;
    width: 80%;
    padding-bottom: 20px;
    font-size: 14px;
    color: gray;

    >.iconfont{
      font-size: 22px;
    }

    >text.tag{
      background-color: gray;
      color: white;
      padding: 1px 3px;
      font-size: 12px;
      margin-left: 5px;
    }
  }
  >.comments-container{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    padding: 0 10%;
    padding-top: 30px;
    padding-bottom: 100px;
    width: 100%;
    background-color: #ededed;

    >text.title{
      color: #333;
      font-size: 14px;
    }

    >.comment-container{
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      margin: 10px 0;
      width: 100%;
      color: black;
      font-size: 12px;

      >.comment{
        width: 100%;
        padding-left: 34px;
        font-size: 13px;
        margin-top: 5px;
      }
      >.user-info{
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;

        >image{
          width: 24px;
          height: 24px;
          border-radius: 50%;
          margin-right: 10px;
        }
        >.user-name{
          font-size: 12px;
          margin-right: 5px;
          line-height: 24px;
        }
        >.user-feeling{
          font-size: 12px;
          line-height: 24px;
        }
      }
    }
  }
  >.create-commit-button{
    position: fixed;
    right: 40px;
    bottom: 40px;
    width: 40px;
    height: 40px;
    font-size: 24px;
    line-height: 40px;
    text-align: center;
    border-radius: 50%;
    background-color: lightgray;
    color: white;
  }
  >.create-comment-container{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    box-sizing: border-box;
    background-color: #fafafa;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-end;
    padding: 10px;
    box-shadow: 0 5px 5px lightgray;
    z-index: 100;

    >textarea{
      align-self: center;
      width: 100%;
      max-height: 60px;
      font-size: 15px;
      padding: 5px;
      line-height: 20px;
      border-radius: 5px;
      background-color: white;
      border: 1px solid lightgray;
    }
    >view{
      width: 80px;
      height: 30px;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;

      >picker{
        width: 30px;
        height: 30px;
      }
      .feeling-words{
        width: 30px;
        height: 30px;
        line-height: 30px;
        text-align: center;
      }
      >icon{
        font-size: 28px;
        width: 30px;
        height: 30px;
      }
    }
  }
}
</style>
<template>
  <view class="container" bindtap="hideCommitModal">
    <view class="header">
      <image bindtap="previewImage" wx:if="{{ noteInfo.filePath }}" class="note-cover" src="{{ noteInfo.filePath }}" mode="aspectFill" lazy-load></image>
      <text class="note-title" bindlongpress="deleteNote">{{ noteInfo.title }}</text>
      <!-- ÂêéÊúüÊâ©Â±ïÔºöÂàõ‰Ωú‰∫∫‰ø°ÊÅØ -->
      <view class="note-writer">
        <image mode="widthFix" src="{{ noteInfo.creater.wxInfo.avatarUrl }}"></image>
        <text>{{ noteInfo.creater.name }}</text>
      </view>
      <view class="note-info">
        <text>{{ noteInfo.create_at }}</text>
        <text>Â≠óÊï∞Ôºö{{ noteInfo.content.length }}</text>
      </view>
      <text class="note-content" selectable>{{ noteInfo.content }}</text>
    </view>

    <view class="tags-container">
      <text class="iconfont">&#xeb84;</text>
      <text class="tag" wx:for="{{ noteInfo.tags }}">{{ item }}</text>
    </view>

    <view class="comments-container" wx:if="{{comments.length > 0}}">
      <text>ÊÑüÂèóÔºö</text>
      <view class="comment-container" wx:for="{{ comments }}" bindlongpress="deleteComment('{{item.user_id}}', '{{item._id}}')">
        <view class="user-info">
          <image src="{{ item.avatarUrl }}"></image>
          <text class="user-name">{{ item.userName }}</text>
          <text class="user-feeling">{{ item.feeling }}</text>
        </view>
        <text class="comment">{{ item.content }}</text>
      </view>
    </view>

    <!-- ÂêéÊúü‰ºòÂåñ -->
    <!-- Êñ∞Â¢ûËØÑËÆ∫ËæìÂÖ•Ê°Ü -->
    <view class="create-comment-container" wx:if="{{ showCreateCommit }}" catchtap="showCommitModal">
      <textarea value="{{ comment.content }}" placeholder="ËØ¥ÁÇπ‰ªÄ‰πàÂêß..." maxlength="{{ 100 }}" bindfocus="showCommitModal" data-key="comment.content" bindinput="inputChange" auto-height show-confirm-bar="{{ false }}" auto-focus adjust-position="{{ false }}"></textarea>
      <view>
        <picker bindchange="feelingChange" value="{{comment.feelingIndex}}" range="{{feelings}}">
          <view class="feeling-words">
            {{feelings[comment.feelingIndex]}}
          </view>
        </picker>
        <icon class="iconfont" bindtap="createComment">&#xebc9;</icon>
      </view>
    </view>

    <view class="create-commit-button iconfont" wx:else catchtap="showCommitModal">&#xeaff;</view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import util from '@/utils/util.js'
  import request from '@/utils/request.js'

  export default class NoteInfo extends wepy.page {
    config = {
      navigationBarTitleText: 'Á¨îËÆ∞ËØ¶ÊÉÖ',
      navigationBarBackgroundColor: '#fafafa',
      enablePullDownRefresh: true
    }

    data = {
      userId: '',
      noteId: '',
      editNote: false,
      showCreateCommit: false,

      feelings: ['üòÑ', 'üòï', 'üëç', 'üëé', 'üéâ', 'üëÄ'],
      comment: {
        feelingIndex: 0,
        feeling: 'üòÑ',
        content: ''
      },

      comments: [],
      noteInfo: {
        title: '',
        content: '',
        filePath: '',
        visible: false,
        tags: ''
      },
    }

    methods = {
      hideCommitModal(){
        this.showCreateCommit = false
      },
      showCommitModal(e){
        this.showCreateCommit = true
      },
      deleteNote(){
        let self = this

        if(self.noteInfo.user_id == self.userId){
          wx.showModal({
            title: 'ÊèêÁ§∫',
            content: 'Á°ÆÂÆöÂà†Èô§Á¨îËÆ∞Ôºü',
            success(res) {
              if (res.confirm) {
                request.post('/deleteNote', {noteId: self.noteInfo._id})
                .then(res=>{
                  wx.showToast({
                    title: 'Âà†Èô§ÊàêÂäüÔΩû',
                    icon: 'success',
                    duration: 1000
                  })
                  setTimeout(()=>{
                    wx.navigateBack({
                      delta: 1
                    })
                  }, 1000)
                })
              } 
            }
          })
        }
      },
      deleteComment(userId, commentId){
        let self = this

        if(self.userId == userId){
          wx.showModal({
            title: 'ÊèêÁ§∫',
            content: 'Á°ÆÂÆöÂà†Èô§ËØÑËÆ∫Ôºü',
            success(res) {
              if (res.confirm) {
                request.post('/deleteComment', {commentId})
                .then(res=>{

                  self.onShow()
                })
              } 
            }
          })
        }
      },
      createComment(){
        let self = this

        if(self.comment.content == ''){
          return wx.showToast({
            title: 'ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫ÔºÅ',
            icon: 'none',
            duration: 1000
          })
        }

        let data = {
          noteId: self.noteId,
          userId: self.userId,
          feeling: self.comment.feeling,
          content: self.comment.content,
        }

        request.post('/createComment', data)
        .then(res=>{
          wx.showToast({
            title: 'ËØÑËÆ∫ÊàêÂäüÔΩû',
            icon: 'success',
            duration: 1000
          })
          self.comment.content = ''
          self.$apply()
          self.onShow()
        })
      },
      feelingChange(e){
        this.comment.feelingIndex = e.detail.value
        this.comment.feeling = this.feelings[e.detail.value]
      },
      showCommitModal(e){
        this.showCreateCommit = true
      },
      editNote(){
        let self = this

        if(self.noteInfo.content == ''){
          return wx.showToast({
            title: 'ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫ÔºÅ',
            icon: 'none',
            duration: 1000
          })
        }

        let data = {
          noteId: self.nodeId,
          userId: self.userId,
          title: self.noteInfo.title,
          filePath: self.noteInfo.filePath,
          content: self.noteInfo.content,
          visible: JSON.stringify(self.noteInfo.visible),
          tags: JSON.stringify(self.noteInfo.tags),
        }


        if(self.noteInfo.filePath){
          const uploadTask = wx.uploadFile({
            url: 'https://api.grayclass.site:2333/api/editNote',
            filePath: self.noteInfo.filePath,
            name: 'file',
            formData: data,
            success(res) {
              console.log(res)
              const data = res.data

              wx.showToast({
                title: 'Êñ∞Â¢ûÊàêÂäüÔΩû',
                icon: 'success',
                duration: 1000
              })
              setTimeout(() => {
                wx.switchTab({
                  url: '/pages/notes'
                })
              }, 1000);
            }
          })

          // ÂêéÊúüÁªÜÂåñÂÜçËØ¥
          // uploadTask.onProgressUpdate((res) => {
          //   console.log('‰∏ä‰º†ËøõÂ∫¶', res.progress)
          //   console.log('Â∑≤Áªè‰∏ä‰º†ÁöÑÊï∞ÊçÆÈïøÂ∫¶', res.totalBytesSent)
          //   console.log('È¢ÑÊúüÈúÄË¶Å‰∏ä‰º†ÁöÑÊï∞ÊçÆÊÄªÈïøÂ∫¶', res.totalBytesExpectedToSend)
          // })
        }
        else{
          request.post('/editNote', data)
          .then(res=>{
            
          })
        }
      },
      chooseImage(){
        let self = this

        wx.chooseImage({
          count: 1,
          success(res) {

            self.noteInfo.filePath = res.tempFilePaths[0]
            self.$apply()

            // ÂéãÁº©ÂõæÁâá
            if(res.tempFilePaths.length > 0){
              wx.compressImage({
                src: res.tempFilePaths[0],
                quality: 75,
                success(res){

                  self.noteInfo.filePath = res.tempFilePath
                  self.$apply()
                }
              })
            }
          }
        })
      },
      previewImage(){
        wx.previewImage({
          urls: [this.noteInfo.filePath]
        })
      },
      inputChange(e){
        let self = this
        const keyArr = e.currentTarget.dataset.key.split('.')

        if(keyArr.length == 1){
          this[keyArr[0]] = e.detail.value
        }
        else if(keyArr.length == 2){
          this[keyArr[0]][keyArr[1]] = e.detail.value
        }
        else if(keyArr.length == 3){
          this[keyArr[0]][keyArr[1]][keyArr[2]] = e.detail.value
        }
      },
      clearFile(){
        this.noteInfo.filePath = ''
      },
      toggleVisible(){
        this.noteInfo.visible = !this.noteInfo.visible
      },
    }

    // ‰∏ãÊãâÂà∑Êñ∞
    onPullDownRefresh() {
      this.onShow()
      wx.stopPullDownRefresh()
    }

    onShareAppMessage() {
    }


    onLoad(option){
      let self = this

      self.noteId = option.note_id
    }

    onShow(){
      let self = this, userId = wx.getStorageSync('userId')

      if(userId){
        self.userId = userId
      }

      request.post('/getNoteById', {noteId: self.noteId})
      .then(res=>{
        if(res.data.filePath){
          res.data.filePath = 'https://api.grayclass.site:2333' + res.data.filePath
        }
        res.data.create_at = util.moment(new Date(res.data.create_at)).format('YYYY/M/D hh:mm:ss')
        self.noteInfo = res.data

        wx.setNavigationBarTitle({
          title: res.data.title
        })

        self.$apply()
      })

      request.post('/getCommentsByNoteId', {noteId: self.noteId})
      .then(res=>{
        self.comments = res.data

        self.$apply()
      })
    }
  }
</script>
