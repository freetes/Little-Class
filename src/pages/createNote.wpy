<style lang="less">
page{
  background-color: #ededed;
}

.container{
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;

  >.header{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 10px 7%;
    width: 86%;

    >text{
      color: #8a8a8a;
      font-size: 12px;
    }
    >input{
      width: 100%;
      padding: 10px 0;
      border-bottom: 1px solid #8A8A8A;
      font-size: 15px;
      font-weight: bold;
      color: black;
    }
    >textarea{
      width: 100%;
      padding: 10px 0 !important;
      height: 300px;
      font-size: 15px;
      color: black;
    }
  }
  >.tagsInput{
    margin: 10px 7%;
    width: 86%;
    border-bottom: 1px solid #8A8A8A;
    font-size: 15px;
    color: black;
  }
  >.others{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin: 10px 7%;
    width: 86%;
    font-size: 14px;

    .iconfont{
      font-size: 28px;
      color: #353535;
    }
    >view{
      display: flex;
      flex-direction: row;
      justify-content: flex-start;
      align-items: center;

      >image{
        height: 30px; 
        width: 50px;
      }

      >text{
        font-size: 14px;
      }
    }
  }
  >.button{
    margin: 20px 7%;
    width: 86%;
    text-align: center;
    line-height: 30px;
    padding: 10px 0;
    font-size: 15px;
    font-weight: bold;
    color: black;
    border-radius: 10px;
    background-color: white;
  }
}
</style>
<template>
  <view class="container">
    <view class="header">
      <input placeholder="标题" maxlength="16" data-key="noteInfo.title" value="{{ noteInfo.title }}" bindchange="inputChange" />
      <textarea data-key="noteInfo.content" maxlength="140" value="{{ noteInfo.content }}" bindinput="inputChange" placeholder="内容" />
    </view>
    <input class="tagsInput" maxlength="16" placeholder="标签，用空格隔开" data-key="noteInfo.tags" value="{{ noteInfo.tags }}" bindchange="inputChange" />
    <view class="others">
      <text class="iconfont" wx:if="{{ noteInfo.filePath=='' }}" bindtap="chooseImage">&#xeb8d;</text>
      <view wx:else>
        <image bindtap="previewImage" mode="aspectFill" src="{{ noteInfo.filePath }}"></image>
        <text class="iconfont" bindtap="clearFile">&#xeb97;</text>
      </view>

      <view bindtap="toggleVisible">
        <!-- <text>是否可见</text> -->
        <text class="iconfont">{{noteInfo.visible?'&#xebcd;':'&#xebcf;' }}</text>
      </view>
    </view>

    <button class="button" disabled="{{ loading }}" loading="{{ loading }}" bindtap="createNote">确定</button>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import request from '@/utils/request.js'

  export default class CreateNote extends wepy.page {
    config = {
      navigationBarTitleText: '创建笔记',
    }

    data = {
      groupId: '',
      userId: '',
      loading: false,
      noteInfo: {
        title: '',
        content: '',
        filePath: '',
        visible: false,
        tags: ''
      },
    }

    methods = {
      previewImage(){
        wx.previewImage({
          urls: [this.noteInfo.filePath]
        })
      },
      createNote(){
        let self = this

        if(self.noteInfo.title == ''){
          return wx.showToast({
            title: '标题不能为空！',
            icon: 'none',
            duration: 1000
          })
        }

        if(self.noteInfo.content == ''){
          return wx.showToast({
            title: '内容不能为空！',
            icon: 'none',
            duration: 1000
          })
        }

        self.loading = true

        let data = {
          title: self.noteInfo.title,
          content: self.noteInfo.content,
          visible: JSON.stringify(self.noteInfo.visible),
          tags: self.noteInfo.tags?JSON.stringify(self.noteInfo.tags.split(/\s+/)):JSON.stringify([]),
          userId: self.userId,
          groupId: self.groupId,
        }

        if(self.noteInfo.filePath){
          const uploadTask = wx.uploadFile({
            url: 'https://api.grayclass.site:2333/api/createNote',
            filePath: self.noteInfo.filePath,
            name: 'file',
            formData: data,
            success(res) {
              wx.showToast({
                title: '新增成功～',
                icon: 'success',
                duration: 1000
              })
              setTimeout(() => {
                wx.navigateBack({
                  delta: 1
                })
              }, 1000);
            }
          })
        }
        else{
          request.post('/createNote', data)
          .then(res=>{
            wx.showToast({
              title: '新增成功～',
              icon: 'success',
              duration: 1000
            })
            setTimeout(() => {
              wx.navigateBack({
                delta: 1
              })
            }, 1000);
          })
        }
      },
      chooseImage(){
        let self = this

        wx.chooseImage({
          count: 1,
          sizeType: ['original', 'compressed'],
          success(res) {
            // 压缩图片
            if(res.tempFilePaths.length > 0){
              wx.compressImage({
                src: res.tempFilePaths[0],
                quality: 50,
                success(res){
                  self.noteInfo.filePath = res.tempFilePath
                  self.$apply()
                },
                fail(){
                  self.noteInfo.filePath = res.tempFilePaths[0]
                  self.$apply()
                }
              })
            }
          }
        })
      },
      inputChange(e){
        let self = this
        const keyArr = e.currentTarget.dataset.key.split('.')

        if(keyArr.length == 1){
          this[keyArr[0]] = e.detail.value
        }
        else if(keyArr.length == 2){
          this[keyArr[0]][keyArr[1]] = e.detail.value
        }
        else if(keyArr.length == 3){
          this[keyArr[0]][keyArr[1]][keyArr[2]] = e.detail.value
        }
      },
      clearFile(){
        this.noteInfo.filePath = ''
      },
      toggleVisible(){
        this.noteInfo.visible = !this.noteInfo.visible
      },
    }

    onLoad(option){
      let self = this

      self.groupId = option.group_id
    }

    onShow() {
      let self = this, userId = wx.getStorageSync('userId')

      if(userId){
        self.userId = userId
      }
    }
  }
</script>
