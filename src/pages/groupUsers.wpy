<style lang="less">
page{
  background-color: #fafafa;
}

.container{
  >.members{
    display: flex;
    flex-direction: column;;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 10px 5%;
    width: 90%;

    >.title{
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      color: #8A8A8A;
      font-size: 14px;
    }
    >.member-container{
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      flex-wrap: wrap;
      padding: 5px 0;
      width: 100%;

      >.userInfo{
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        width: 100%;
        height: 50px;
        padding: 5px 0;
        margin-top: 10px;

        >image{
          width: 40px;
          height: 40px;
          border-radius: 50%;
          margin-right: 10px;
        }
        >text{
          font-size: 14px;
          color: black;
          margin-right: 10px;
        }
        >.delete-button{
          font-size: 12px;
          color: gray;
          border: 1px solid lightgray;
          padding: 0 3px;
          border-radius: 2px;
        }
      }
      >.btns{
        >button{
          padding: 10px 0;
          background-color: white;
          border-top: 1px solid #fafafa;
          border-bottom: 1px solid #fafafa;
        }
        >button::after{
          border: none;
        }
      }
    }
  }
  .modal-container{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 100;

    >.modal-main{
      background-color: #fff;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      padding: 0 10px;
      width: 60%;
      padding-bottom: 0;

      >.modal-title{
        border-bottom: 1px solid light#8A8A8A;
        margin: 10px 0;
        font-size: 12px;
        color: #8A8A8A;
      }
      >button{
        padding: 5px 10px;
        margin: 20px 0;
        align-self: center;
        border: 1px solid #8a8a8a;
        background-color: white;
        font-size: 14px;
        color: black;
        font-weight: bold;
      }
      >button::after{
        border: none;
      }
    }
  }
  >.inputs{
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    margin: 10px 5%;
    padding-top: 10px;
    width: 90%;

    >text{
      color: #8a8a8a;
      font-size: 14px;
    }

    >.input-container{
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding: 20px 0;
      width: 100%;
      border-bottom: 1px solid #fafafa;

      >text{
        flex: 0 1 auto;
        color: black;
        font-size: 16px;
        padding-right: 20px;
      }
      >input, >picker{
        flex: 1 0 auto;
        color: black;
        font-size: 16px;
        font-weight: bold;
        text-align: right;
      }
    }
  }
  >.message{
    align-self: center;
    font-size: 14px;
    color: #8A8A8A;
  }
  >.btns{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 90%;
    margin: 5px 5%;
    background-color: white;
    border-radius: 10px;

    >button{
      padding: 5px 0%;
      background-color: white;
      font-size: 16px;
      font-weight: bold;
      color: brown;
    }
    >button::after{
      border: none;
    }
    >.disable{
      color: #8A8A8A;
    }
  }
}
</style>
<template>
  <view class="container">

    <view class="inputs">
      <text>我的信息</text>
      <view class="input-container">
        <text>昵称</text>
        <input placeholder="请输入群昵称" data-key="userInfo.nickname" value="{{ userInfo.nickname }}" bindchange="inputChange" />
      </view>
    </view>

    <text class="message">{{message}}</text>

    <!-- 成员 信息 -->
    <view class="members">
      <view class="title">
        <text>所有成员</text>
        <text class="assist">{{ members.length==0?'空空无人':'共' + members.length + '人'}}</text>
      </view>
      <view class="member-container" wx:if="{{ members.length!=0 }}" wx:key="user_id">
        <view class="userInfo" wx:for="{{ members }}">
          <image mode="widthFix" src="{{ item.wxInfo.avatarUrl }}"></image>
          <text class="username">{{ item.nickname || item.name }}</text>
          <text wx:if="{{ userLevel == 1 && item.userLevel != 1 }}" class="delete-button" bindtap="deleteMember({{ index }})">删除</text>
        </view>
      </view>
    </view>

    <view class="btns">
      <!-- 普通用户 功能 -->
      <button hover-class="none" wx:if="{{ userInfo.userLevel == 0}}" bindtap="exitGroup">退出</button>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import request from '@/utils/request.js'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '成员信息',
      navigationBarBackgroundColor: '#fafafa'
    }

    data = {
      groupId: '',
      userId: '',
      members: [],
      userInfo: {},
      message: '',
      userLevel: 0,
    }

    watch = {
      userInfo (newValue, oldValue) {
        let self = this
        
        request.post('/editUserGroupInfo', {
          userId: self.userId,
          groupId: self.groupId,
          nickname: self.userInfo.nickname,
        })
        .then(res=>{
          self.message = '更新成功！'
          self.$apply()
          setTimeout(() => {
            self.message = ''
            self.$apply()
          }, 2000);
        })
      }
    }


    methods = {
      deleteMember(index){
        let self = this, memberInfo = self.members[index]

        wx.showModal({
          title: '提示',
          content: `确定删除 ${memberInfo.nickname}？`,
          success(res) {
            if (res.confirm) {
              // 请求参数
              let data = {
                groupId: self.groupId,
                userId: memberInfo._id,
              }
              request.post('/exitGroup', data)
              .then(res=>{
                wx.showToast({
                  title: '删除成功！',
                  icon: 'success',
                  duration: 1000
                })
                setTimeout(() => {
                  self.onShow()
                }, 1000);
              })
            } 
          }
        })
      },
      inputChange(e){
        let self = this
        const keyArr = e.currentTarget.dataset.key.split('.')

        if(keyArr.length == 1){
          this[keyArr[0]] = e.detail.value
        }
        else if(keyArr.length == 2){
          this[keyArr[0]][keyArr[1]] = e.detail.value
        }
        else if(keyArr.length == 3){
          this[keyArr[0]][keyArr[1]][keyArr[2]] = e.detail.value
        }
      },
      exitGroup(){
        let self = this

        wx.showModal({
          title: '提示',
          content: '确定退出？',
          success(res) {
            if (res.confirm) {
              // 请求参数
              let data = {
                groupId: self.groupId,
                userId: self.userInfo._id,
              }
              request.post('/exitGroup', data)
              .then(res=>{
                wx.showToast({
                  title: '退出成功！',
                  icon: 'success',
                  duration: 1000
                })
                setTimeout(() => {
                  wx.switchTab({url: '/pages/index'})
                }, 1000);
              })
            } 
          }
        })
      },
    }

    onLoad(option) {
      let self = this

      self.groupId = option.group_id
    }

    onShow(){
      let self = this, userId = wx.getStorageSync('userId')

      self.userId = userId

      request.post('/getUsersByGroupId', {groupId: self.groupId})
      .then(res=>{
        for(let item of res.data){
          if(item._id == userId){
            self.userLevel = item.userLevel
            self.userInfo = item
            break
          }
        }
        self.members = res.data
        
        self.$apply()
      })

    }
  }
</script>
